import React, { useState, useEffect } from "react";
import AuthLayout from "@/components/reuse/auth_Layout";
import Price from "@/components/price";
import Head from "next/head";
import Loader from "@/components/reuse/loader";
import { paymentCurrencies, useCurrency } from "@/hooks/useCurrency";
import CustomAds from "@/components/customads";

const Pricing = () => {
  const [billingType, setBillingType] = useState("annual");
  const [expanded, setExpanded] = useState(false);
  const [billings, setBillings] = useState([]);
  const [currency, setCurrency] = useState(paymentCurrencies.dollar);
  const [checked, setChecked] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const { conversionRate, conversionRateloading } = useCurrency(currency);
  const handleChangeCheckbox = (e) => {
    if (checked) {
      setCurrency(paymentCurrencies.dollar);
      setChecked(false);
    } else {
      setCurrency(e.target.value);
      setChecked(true);
    }
  };

  const getPrice = async () => {
    setIsLoading(true);
    try {
      const response = await fetch(`${process.env.BASE_URL}/api/packages/`);
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      const data = await response.json();
      setBillings(data);
    } catch (error) {}
  };

  useEffect(() => {
    getPrice();
  }, []);

  const handleChange = (id) => (event, isExpanded) => {
    setExpanded(isExpanded ? id : false);
  };

  const handleToggleBilling = () => {
    setBillingType("annual");
  };

  return (
    <>
      <Head>
        <title>Pricing || Page</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta
          property="og:url"
          content="https://africanproverbs.com/pricing/"
        ></meta>
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <AuthLayout>
          {!isLoading ? (
            <div className="flex justify-center col-span-3">
              <Loader />
            </div>
          ) : (
            <>
              {/* <div className="my-10">
                <label class="relative inline-flex items-center mr-5 cursor-pointer">
                  <input
                    type="checkbox"
                    onChange={handleChangeCheckbox}
                    value={paymentCurrencies.naira}
                    class="sr-only peer"
                    checked={checked}
                  />
                  <div class="w-11 h-6 bg-gray-200 rounded-full peer dark:bg-gray-700 peer-focus:ring-4 peer-focus:ring-orange-300 dark:peer-focus:ring-orange-800 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-orange-500"></div>
                  <span class="ml-3 text-sm font-medium text-gray-900 dark:text-gray-300">
                    Naira Equivalent
                  </span>
                </label>
              </div> */}
              <Price
                billings={billings}
                billingType={billingType}
                expanded={expanded}
                handleChange={handleChange}
                handleToggleBilling={handleToggleBilling}
                conversionRate={conversionRate}
                conversionRateloading={conversionRateloading}
              />
            </>
          )}
          <CustomAds />
        </AuthLayout>
      </main>
    </>
  );
};

export default Pricing;
